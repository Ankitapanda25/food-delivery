/*!
 * name: @jswork/next-abstract-storage
 * description: An abstract storage based on next.
 * homepage: https://js.work
 * version: 1.0.7
 * date: 2023-07-27 18:00:46
 * license: MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = void 0;
var _next = _interopRequireDefault(require('@jswork/next'));
require('@jswork/next-json');
require('@jswork/next-slice2str');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var EMPTY_STR = '';
var SEPARATOR = '@';
var NxAbstractStorage = _next['default'].declare('nx.AbstractStorage', {
  methods: {
    init: function init(inOptions) {
      this.engine = inOptions.engine;
      this.prefix = inOptions.prefix || EMPTY_STR;
      this.options = inOptions;
      this.setAccessor();
    },
    setAccessor: function setAccessor() {
      this.accessor = {
        get: this.options.get || 'getItem',
        set: this.options.set || 'setItem',
        remove: this.options.remove || 'removeItem',
        clear: this.options.clear || 'clear',
        save: this.options.save || 'save'
      };
    },
    serialize: function serialize(inTarget) {
      return _next['default'].stringify(inTarget);
    },
    deserialize: function deserialize(inString) {
      return _next['default'].parse(inString);
    },
    set: function set(inKey, inValue) {
      // del when nx.NIL
      if (inValue === _next['default'].NIL) return this.del(inKey);
      // else set
      var index = inKey.indexOf('.');
      if (index > -1) {
        var paths = _next['default'].slice2str(inKey, index, 1);
        var context = this.get(paths[0]) || {};
        _next['default'].set(context, paths[1], inValue);
        this.set(paths[0], context);
      } else {
        this.engine[this.accessor.set](this.__key(inKey), this.serialize(inValue));
      }
      this.save();
    },
    sets: function sets(inObject) {
      _next['default'].each(
        inObject,
        function (key, value) {
          this.set(key, value);
        },
        this
      );
    },
    get: function get(inKey) {
      var index = inKey.indexOf('.');
      if (index > -1) {
        var paths = _next['default'].slice2str(inKey, index, 1);
        var context = this.get(paths[0]) || {};
        return _next['default'].get(context, paths[1]);
      } else {
        var value = this.engine[this.accessor.get](this.__key(inKey));
        return this.deserialize(value);
      }
    },
    gets: function gets(inKeys) {
      var result = {};
      var keys = this.__keys(inKeys);
      _next['default'].each(
        keys,
        function (_, key) {
          result[key] = this.get(key);
        },
        this
      );
      return result;
    },
    del: function del(inKey) {
      this.engine[this.accessor.remove](this.__key(inKey));
      this.save();
    },
    dels: function dels(inKeys) {
      var keys = this.__keys(inKeys);
      _next['default'].each(
        keys,
        function (_, key) {
          this.del(key);
        },
        this
      );
    },
    clear: function clear() {
      this.engine[this.accessor.clear]();
      this.save();
    },
    keys: function keys() {
      return Object.keys(this.engine);
    },
    save: function save() {
      // @template method
    },
    __key: function __key(inKey) {
      var prefix = this.prefix;
      return prefix ? [prefix, SEPARATOR, inKey].join(EMPTY_STR) : inKey;
    },
    __keys: function __keys(inKeys) {
      var length_, keys;
      var allNsKeys = [];
      if (!Array.isArray(inKeys)) {
        keys = this.keys();
        length_ = this.prefix.length + 1;
        _next['default'].each(
          keys,
          function (_, item) {
            if (this.prefix && item.indexOf(this.prefix + SEPARATOR) === 0) {
              allNsKeys.push(item.slice(length_));
            }
          },
          this
        );
        return allNsKeys.length ? allNsKeys : keys;
      }
      return inKeys;
    }
  }
});
if (typeof module !== 'undefined' && module.exports && typeof wx === 'undefined') {
  module.exports = NxAbstractStorage;
}
var _default = NxAbstractStorage;
exports['default'] = _default;
